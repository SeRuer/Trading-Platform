
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.Component;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.netbeans.xml.schema.shows.Stock;

/**
 *
 * @author TMuja
 */
public class clientGui extends javax.swing.JFrame {

    public double rateInGBP;
    public String curName;

    /**
     * Creates new form clientGui
     */
    public clientGui() {
        initComponents();
        List<java.lang.String> currencyCon = getCurrencyCodes();
        
        loadTable();

        System.out.println(currencyCon);

        //This allows currencyCon objects into the combo box list by
        currencyCon.forEach((String k) -> {
            currencyCoin.addItem(k);
        });

    }

    //This function allows me to display the data in the JTable and it's also used whenever something occurs on the table
    public void loadTable() {
        DefaultTableModel model = (DefaultTableModel) stockTable.getModel();
        model.setRowCount(0);
        List<org.netbeans.xml.schema.shows.Stock> stockList = listStock();

        
        //This allows the me to see the current date and time 
        DateFormat dataF = new SimpleDateFormat("yyyy/MM/dd HH:mm");
        Calendar calu = Calendar.getInstance();
        String d = dataF.format(calu.getTime());
        dataTF.setText(d);

        Iterator itr = stockList.iterator();
        Stock nextStock;
        //Here I iterated through the entire the data to retrieve every single stock
        while (itr.hasNext()) {
            nextStock = (Stock) itr.next();
            System.out.println(nextStock);
            String company = nextStock.getStockName();
            String ticker = nextStock.getSymbol();
            int shares = nextStock.getShares();
            int cost = nextStock.getCost();
            String date = nextStock.getStockDescription().getDate();
            String currency = nextStock.getStockDescription().getCurrency();
            double sharePrice = nextStock.getStockDescription().getSharePrice();
            //Here I had to place every variable into an object which will fill the JTable 
            Object[] row = {company, ticker, shares, cost, date, currency, sharePrice};
            //This will then use 'addRow' to add row into every row in the table.
            model.addRow(row);

            ArrayList<Object> list = new ArrayList<>();

            list.add(company);
            list.add(ticker);
            list.add(shares);
            list.add(cost);
            list.add(currency);
            list.add(date);
            list.add(sharePrice);
            String line = "";
            System.out.println(list);
        }

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jLabel2 = new javax.swing.JLabel();
        dataTF = new javax.swing.JTextField();
        searchTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        stockTable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        buyButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        currencyCoin = new javax.swing.JComboBox<>();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DefaultTableMode");
        setBackground(new java.awt.Color(51, 51, 51));
        setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel2.setText("Date");

        searchTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTFActionPerformed(evt);
            }
        });
        searchTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTFKeyReleased(evt);
            }
        });

        stockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Company", "Ticker", "AmountOfShares", "Cost", "Date", "Currency", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(stockTable);

        jButton2.setText("Sell");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        buyButton.setText("Buy");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel3.setText("Search");

        currencyCoin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Currency" }));
        currencyCoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currencyCoinActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(jLabel3)
                .addGap(30, 30, 30)
                .addComponent(searchTF, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(70, 70, 70)
                .addComponent(dataTF, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(178, 178, 178))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(318, 318, 318)
                        .addComponent(buyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(112, 112, 112)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 977, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(currencyCoin, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(146, 146, 146))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(searchTF, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(50, 50, 50)
                .addComponent(currencyCoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
//This is for whenever the row is ever selected by me 
        if (!stockTable.getSelectionModel().isSelectionEmpty()) {
            //This pops up are you sure you want ot purchase
            int z = JOptionPane.showConfirmDialog((Component) null, "Would you like to purchase this stock?", "BUY", JOptionPane.YES_NO_CANCEL_OPTION);          
            if (z == 0) {
                int row = stockTable.getSelectedRow();
                String symbol = stockTable.getModel().getValueAt(row, 1).toString();
                String price = stockTable.getModel().getValueAt(row, 6).toString();
                System.out.println(symbol);
                try {
                    //Calling the method inside of the button which will then execute the code that's in the sellFunction
                    boolean buy = buyFunction(6000, Double.parseDouble(price), 1, symbol);
                    //So once I have bought a stock then it will call onto the loadTable() function which will then update the table
                    System.out.println(buy);
                    if (buy) {
                        loadTable();
                    }                 
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        }
    }//GEN-LAST:event_buyButtonActionPerformed

    private void searchTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTFKeyReleased
   
    //Here allows me to sort each column by descending and ascending order  
        stockTable.setAutoCreateRowSorter(true);//This enables the default sorting for any of the table
        DefaultTableModel table;
        table = (DefaultTableModel) stockTable.getModel();
        String search = searchTF.getText().toLowerCase();
        //This specifies the column index where the table will be sorted by 
        //which allows me to sort it by a specific column
        TableRowSorter<DefaultTableModel> tr;
        tr = new TableRowSorter<>(table);
        stockTable.setRowSorter(tr);
        List<RowSorter.SortKey> sortIt;
        sortIt = new ArrayList<>();
        //Here I will be to sort the columns by ascending order or by descending 
        int columnIndexToSort = 1;
        sortIt.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.ASCENDING));
        tr.setRowFilter(RowFilter.regexFilter(search));
        tr.setSortKeys(sortIt);
        tr.sort();


    }//GEN-LAST:event_searchTFKeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       //This is for whenever the row is ever selected by me
        if (!stockTable.getSelectionModel().isSelectionEmpty()) {
             //This pops up are you sure you want ot purchase
            int z = JOptionPane.showConfirmDialog((Component) null, "Would you like to sell this stock?", "SELL", JOptionPane.YES_NO_CANCEL_OPTION);
            if (z == 0) {
                int row = stockTable.getSelectedRow();
                String symbol = stockTable.getModel().getValueAt(row, 1).toString();
                String price = stockTable.getModel().getValueAt(row, 6).toString();
                try {
                    //Calling the method inside of the button which will then execute the code that's in the sellFunction
                   boolean sell = sellFunction(6000, Double.parseDouble(price), 1, symbol);
                    System.out.println("String" + sell);
                    //So once I have bought a stock then it will call onto the loadTable() function which will then update the table
                    if (sell) {
                        loadTable();
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);

                }
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void currencyCoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currencyCoinActionPerformed
        DefaultTableModel model = (DefaultTableModel) stockTable.getModel();
        //Here I will be changing the prices of the stocks by the chosen currency I want
        //I'll be using the currencyConverter web service to fetch the currencies rate
        System.out.println(currencyCoin.getSelectedIndex());
        //    System.out.println(priceRate);
        if (currencyCoin.getSelectedIndex() > 0) {
            System.out.println("test1");
            try {
                loadTable();
                System.out.println("test2");
                System.out.println(currencyCoin.getSelectedItem().toString().substring(0, 3));
                String targetCurrency = currencyCoin.getSelectedItem().toString().substring(0, 3);
                double result;
                double valueAt;
                double pick1;
                System.out.println(model.getRowCount());
                for (int y = 0; y < model.getRowCount(); y++) {
                    //System.out.println(model.getRowCount());
                    //Object valueAt; //Here I am fetching value in the model on column 7 
                    System.out.println(model.getValueAt(y, 5));
                    //Object pick1;
                    //I'll be fetching the currencies symbols as their values and setting them into the correct column
                    String sourceCurrency = (String) model.getValueAt(y, 5);
                    model.setValueAt(targetCurrency, y, 5);
                    valueAt = (double) model.getValueAt(y, 6);
                    System.out.println("valueAt: " + valueAt);
                    pick1 = (double) model.getValueAt(y, 6);//Once that column has been fetched then it will equal that value to the one I would have picked
                    System.out.println("pick1: " + pick1);
                    double priceRate = getConversionRate(sourceCurrency, targetCurrency);
                    result = priceRate * pick1;//Here I am multiplying that picked vlaue to the price rate its attached to
                    System.out.println("Result: " + result);
                    model.setValueAt(result, y, 6);
                }

            } catch (Exception e) {
                System.out.println("Exception: " + e.getMessage());

            }
        }


    }//GEN-LAST:event_currencyCoinActionPerformed

    private void searchTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(clientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(clientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(clientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(clientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new clientGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buyButton;
    private javax.swing.JComboBox<String> currencyCoin;
    private javax.swing.JTextField dataTF;
    private javax.swing.JButton jButton2;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchTF;
    private javax.swing.JTable stockTable;
    // End of variables declaration//GEN-END:variables

    private static java.util.List<org.netbeans.xml.schema.shows.Stock> listStock() {
        org.myws.NerveWebService_Service service = new org.myws.NerveWebService_Service();
        org.myws.NerveWebService port = service.getNerveWebServicePort();
        return port.listStock();
    }
    private static double getConversionRate(java.lang.String arg0, java.lang.String arg1) {
        docwebservices.CurrencyConversionWSService service = new docwebservices.CurrencyConversionWSService();
        docwebservices.CurrencyConversionWS port = service.getCurrencyConversionWSPort();
        return port.getConversionRate(arg0, arg1);
    }

    private static java.util.List<java.lang.String> getCurrencyCodes() {
        docwebservices.CurrencyConversionWSService service = new docwebservices.CurrencyConversionWSService();
        docwebservices.CurrencyConversionWS port = service.getCurrencyConversionWSPort();
        return port.getCurrencyCodes();
    }

    private static boolean buyFunction(int arg0, double arg1, int arg2, java.lang.String arg3) {
        org.myws.NerveWebService_Service service = new org.myws.NerveWebService_Service();
        org.myws.NerveWebService port = service.getNerveWebServicePort();
        return port.buyFunction(arg0, arg1, arg2, arg3);
    }

    private static boolean sellFunction(int arg0, double arg1, int arg2, java.lang.String arg3) {
        org.myws.NerveWebService_Service service = new org.myws.NerveWebService_Service();
        org.myws.NerveWebService port = service.getNerveWebServicePort();
        return port.sellFunction(arg0, arg1, arg2, arg3);
    }

    private static int searchFunction(java.util.List<java.lang.String> arg0, int arg1, int arg2, java.lang.String arg3) {
        org.myws.NerveWebService_Service service = new org.myws.NerveWebService_Service();
        org.myws.NerveWebService port = service.getNerveWebServicePort();
        return port.searchFunction(arg0, arg1, arg2, arg3);
    }

}
